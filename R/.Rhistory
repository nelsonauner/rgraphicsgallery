mvrnorm(n = 20, mu=c(5,0), Sigma = matrix(c(3,.9,.9,1),nrow = 2), tol = 1e-6, empirical = FALSE, EISPACK = FALSE) %>% plot
mvrnorm(n = 20, mu=c(5,0), Sigma = matrix(c(1,.9,.9,1),nrow = 2), tol = 1e-6, empirical = FALSE, EISPACK = FALSE) %>% plot
sampleData <- mvrnorm(n = 20, mu=c(5,0), Sigma = matrix(c(1,.9,.9,1),nrow = 2), tol = 1e-6, empirical = FALSE, EISPACK = FALSE) %>% as.data.frame
sampleData
sampleData$Y = sampleData$V1 + sampleData$V2
model <- lm(Y ~ V1 + V2, data=sampleData)
summary(model)
set.seed(5000)
sampleData <- mvrnorm(n = 20, mu=c(5,0), Sigma = matrix(c(1,.9,.9,1),nrow = 2), tol = 1e-6, empirical = FALSE, EISPACK = FALSE) %>% as.data.frame
sampleData$e <- rnorm(20)
sampleData$Y = sampleData$V1 + sampleData$V2
with(sampleData, Y ~ V1 + V2 + e)
with(sampleData, Y = V1 + V2 + e)
?assign
with(sampleData, assign(Y,  V1 + V2 + e))
with(sampleData, assign(sampleData$Y,  V1 + V2 + e))
?with
sampleData <- transform(sampleData, Y=  V1 + V2 + e))
sampleData <- transform(sampleData, Y=  V1 + V2 + e)
head(sampleData)
with(sampleData,plot(Y,V1))
model <- lm(Y ~ V1 + V2, data=sampleData)
summary(model)
with(sampledata,plot(V1,V2))
with(sampleData,plot(V1,V2))
anova(model)
with(sampleData,plot(V1,V2))
sampleData$e2 <- rnorm(20)
sampleData <- transform(sampleData, V3 = V1+e2 )
with(sampleData,plot(V1,V3))
sampleData$e2 <- rnorm(20,sd=.5)
sampleData <- transform(sampleData, V3 = V1+e2 )
sampleData$e2 <- rnorm(20,sd=.5)
with(sampleData,plot(V1,V3))
model <- lm(Y ~ V1 + V2 +V3, data=sampleData)
summary(model)
anova(model)
smallModel <- lm(Y ~ V1, data=sampleData)
fullModel <- lm(Y ~ V1 + V2 +V3, data=sampleData)
smallModel <- lm(Y ~ V1, data=sampleData)
v2Modal <- lm(Y ~ V1 + V2, data=sampleData)
v3Model <- lm(Y ~ V1 + V3, data=sampleData)
?anova
v2Model <- lm(Y ~ V1 + V2, data=sampleData)
v3Model <- lm(Y ~ V1 + V3, data=sampleData)
anova(smallModel,V2Model)
v2Model <- lm(Y ~ V1 + V2, data=sampleData)
anova(smallModel,v2Model)
anova(smallModel,v3Model)
anova(fullModel)
anova(v1Model,v2Model)
vlModel <- lm(Y ~ V1, data=sampleData)
anova(fullModel)
anova(v1Model,v2Model)
vlModel <- lm(Y ~ V1, data=sampleData)
anova(v1Model,v2Model)
v1Model <- lm(Y ~ V1, data=sampleData)
anova(v1Model,v2Model)
anova(v1Model,v3Model)
v2ResidModel <- lm(resid(v1Model) ~ sampleData$V2)
summary(v2ResidModel)
v2ResidModel <- lm(resid(v1Model) ~ sampleData$V2 -1 )
summary(v2ResidModel)
v2ResidModel <- lm(resid(v1Model) ~ sampleData$V3 -1 )
v3RedidModel
v2ResidModel <- lm(resid(v1Model) ~ sampleData$V3 -1 )
v3ResidModel <- lm(resid(v1Model) ~ sampleData$V3 -1 )
summary(v3ResidModel)
v2ResidModel <- lm(resid(v1Model) ~ sampleData$V2 -1 )
summary(v2ResidModel)
library(MASS)
set.seed(5000)
sampleData <- mvrnorm(n = 20, mu=c(5,0), Sigma = matrix(c(1,.9,.9,1),nrow = 2), tol = 1e-6, empirical = FALSE, EISPACK = FALSE) %>% as.data.frame
sampleData$e <- rnorm(20)
sampleData$e2 <- rnorm(20,sd=.5)
sampleData <- transform(sampleData, Y=  V1 + V2 + e)
sampleData <- transform(sampleData, V3 = V1+e2)
fullModel <- lm(Y ~ V1 + V2 +V3, data=sampleData)
v1Model <- lm(Y ~ V1, data=sampleData)
v2Model <- lm(Y ~ V1 + V2, data=sampleData)
v3Model <- lm(Y ~ V1 + V3, data=sampleData)
#examine this output
summary(lm)
summary(fullModel)
anova(fullModel)
source('~/.active-rstudio-document')
library(magrittr)
summary(v2Model)
summary(v3Model)
summary(lm(Y~V3+V1, data=sampleData))
summary(lm(Y~V3+V1-1, data=sampleData))
sampleData
?update
up <- update(v1Model, . ~ . + sampleData$V2)
summary(up)
up <- update(v1Model, . ~ . + sampleData$V3)
summary(up)
v1Model
summary(v1Model)
summary(up)
anova(v1Model,v3Model)
anova(v1Model,up)
v3ResidModel <- lm(resid(v1Model) ~ sampleData$V3 -1 )
summary(v3ResidModel)
v2ResidModel <- lm(resid(v1Model) ~ sampleData$V2 - )
summary(v2ResidModel)
v3ResidModel <- lm(resid(v1Model) ~ sampleData$V3 -1 )
summary(v3ResidModel)
dfx <- data.frame(
group = c(rep('A', 6), rep('B', 6), rep('C', 6)),
sex = sample(c("M", "F"), size = 18, replace = TRUE),
age = runif(n = 18, min = 18, max = 54)
)
age_summary <- dfx %>%
group_by(group, sex) %>%
summarize(mean = round(mean(age), 2),
sd = round(sd(age), 2))
libary(dplyr)
library(dplyr)
age_summary <- dfx %>%
group_by(group, sex) %>%
summarize(mean = round(mean(age), 2),
sd = round(sd(age), 2))
age_summary
?%.%
?"%.%"
# should point to R/
baseDir <- getwd()
baseDir
setwd("C:\Users\n_auner\tech\GridGallery\R")
setwd("C:/Users/n_auner/tech/GridGallery/R")
baseDir <- getwd()
# find names of scripts placed in YourCodeHere
substrRight <- function(x, n=2){substr(x, nchar(x)-n+1, nchar(x))}
scripts <- dir("./YourCodeHere/")
# scripts should be executed under the following conditions:
#     - must end in ".R"
#     - must not have same name as another, already processed script
alreadyPosted <- strsplit(dir("../img/thumb/"),".png",fixed=TRUE)
alreadyPosted
alreadyPosted <- strsplit(dir("../img/thumb/"),".png",fixed=TRUE)
strsplit(dir("../img/thumb/"),".png",fixed=TRUE)
dir("../img/thumb/")
scripts <-  scripts[sapply(scripts,
FUN=function(x) {
substrRight(x)==".R" &&
!(strsplit(x,".R") %in% alreadyPosted)
})]
scripts
options(echo=TRUE)
args <- commandArgs(trailingOnly=TRUE)
print(args)
x11()
# footer file ----
desiredOutputSize = 200*200
# at this point the graphic should be plotted to the x11 device
# query its dimensions for resizing
size = dev.size("px")
scaleRatio = desiredOutputSize/(size[1]*size[2])
sideRatio = sqrt(scaleRatio)
adjWidth = round(size[1]*sideRatio)
adjHeight = round(size[2]*sideRatio)
plot(1:10,2:20)
plot(1:10,2:12)
plot(1:10,2:11)
# footer file ----
desiredOutputSize = 200*200
# at this point the graphic should be plotted to the x11 device
# query its dimensions for resizing
size = dev.size("px")
scaleRatio = desiredOutputSize/(size[1]*size[2])
sideRatio = sqrt(scaleRatio)
adjWidth = round(size[1]*sideRatio)
adjHeight = round(size[2]*sideRatio)
dev.copy(png,filename=paste0("../img/thumb/",scripts[i],".png"),width=adjWidth, height = adjHeight,units="px")
dev.copy(png,filename=paste0("../img/thumb/","attempt",".png"),width=adjWidth, height = adjHeight,units="px")
dev.off()
dev.copy(png,paste0("../img/large/",scripts[i],".png"), width=adjWidth*2, height=adjHeight*2,units="px")
dev.off()
desiredOutputSize = 200*200
# at this point the graphic should be plotted to the x11 device
# query its dimensions for resizing
size = dev.size("px")
x11()
dev.new(width=200px,height=200px)
?dev.new
?Devices
dev.new(width=5,height=4)
x11()
plot(1:10)
dev.new(widht=5,height=4)
plot(1:10)
dev.new()
plot(10:1)
dev.off()
x11()
dev.new(height=5,width=5)
plot(1:10)
dev.copy(png,filename="hiImAPNG.png")
dev.off()
png(file="hiImAlsoPNG.png",width=400,height=350)
plot(x=rnorm(10),y=rnorm(10),main="example")
dev.off()
baseDir <- getwd()
# find names of scripts placed in YourCodeHere
substrRight <- function(x, n=2){substr(x, nchar(x)-n+1, nchar(x))}
scripts <- dir("./YourCodeHere/")
scripts
alreadyPosted <- strsplit(dir("../img/thumb/"),".png",fixed=TRUE)
# todo:
#     - throw an error if alreadyPosted
#     - throw a warning for all non-R files (they won't be run)
scripts <-  scripts[sapply(scripts,
FUN=function(x) {
substrRight(x)==".R" &&
!(strsplit(x,".R") %in% alreadyPosted)
})]
alreadyPosted
scripts
for (i in 1:length(scripts)) {
currentScript <- paste0("./YourCodeHere/",scripts[i]
print("processing")
source("head.R")
setwd(paste0(baseDir,
"/YourCodeHere/"))
print(getwd())
source(scripts[i])
setwd(baseDir)
source("foot.R")
file.copy(from=currentScript,to=paste0("./processedCode/",scripts[i]))
# should point to R/
baseDir <- getwd()
# find names of scripts placed in YourCodeHere
substrRight <- function(x, n=2){substr(x, nchar(x)-n+1, nchar(x))}
scripts <- dir("./YourCodeHere/")
# scripts should be executed under the following conditions:
#     - must end in ".R"
#     - must not have same name as another, already processed script
alreadyPosted <- strsplit(dir("../img/thumb/"),".png",fixed=TRUE)
# todo:
#     - throw an error if alreadyPosted
#     - throw a warning for all non-R files (they won't be run)
scripts <-  scripts[sapply(scripts,
FUN=function(x) {
substrRight(x)==".R" &&
!(strsplit(x,".R") %in% alreadyPosted)
})]
# iterate over all valid scripts and produce graphics
for (i in 1:length(scripts)) {
currentScript <- paste0("./YourCodeHere/",scripts[i]
print("processing")
source("head.R")
png(file=paste0("../img/thumb/",scripts[i],".png"),width = 200,height=200)
setwd(paste0(baseDir,
"/YourCodeHere/"))
print(getwd())
source(scripts[i])
setwd(baseDir)
source("foot.R")
file.copy(from=currentScript,to=paste0("./processedCode/",scripts[i]))
#file.remove(currentScript)
#no need to remove
}
scripts
currentScript <- paste0("./YourCodeHere/",scripts[i])
i = 1
currentScript <- paste0("./YourCodeHere/",scripts[i])
print("processing")
source("head.R")
dir()
# should point to R/
baseDir <- getwd()
# find names of scripts placed in YourCodeHere
substrRight <- function(x, n=2){substr(x, nchar(x)-n+1, nchar(x))}
scripts <- dir("./YourCodeHere/")
# scripts should be executed under the following conditions:
#     - must end in ".R"
#     - must not have same name as another, already processed script
alreadyPosted <- strsplit(dir("../img/thumb/"),".png",fixed=TRUE)
# todo:
#     - throw an error if alreadyPosted
#     - throw a warning for all non-R files (they won't be run)
scripts <-  scripts[sapply(scripts,
FUN=function(x) {
substrRight(x)==".R" &&
!(strsplit(x,".R") %in% alreadyPosted)
})]
# iterate over all valid scripts and produce graphics
for (i in 1:length(scripts)) {
currentScript <- paste0("./YourCodeHere/",scripts[i])
print("processing")
png(file=paste0("../img/thumb/",scripts[i],".png"),width = 200,height=200)
source(paste0("YourCodeHere/",scripts[i]))
dev.off()
file.copy(from=currentScript,to=paste0("./processedCode/",scripts[i]))
#file.remove(currentScript)
#no need to remove
}
# should point to R/
baseDir <- getwd()
# find names of scripts placed in YourCodeHere
substrRight <- function(x, n=2){substr(x, nchar(x)-n+1, nchar(x))}
scripts <- dir("./YourCodeHere/")
# scripts should be executed under the following conditions:
#     - must end in ".R"
#     - must not have same name as another, already processed script
alreadyPosted <- strsplit(dir("../img/thumb/"),".png",fixed=TRUE)
# todo:
#     - throw an error if alreadyPosted
#     - throw a warning for all non-R files (they won't be run)
scripts <-  scripts[sapply(scripts,
FUN=function(x) {
substrRight(x)==".R" &&
!(strsplit(x,".R") %in% alreadyPosted)
})]
# iterate over all valid scripts and produce graphics
for (i in 1:length(scripts)) {
currentScript <- paste0("./YourCodeHere/",scripts[i])
print("processing")
png(file=paste0("../img/thumb/",scripts[i],".png"),width = 200,height=200)
setwd("YourCodeHere")
source(,scripts[i])
dev.off()
file.copy(from=currentScript,to=paste0("./processedCode/",scripts[i]))
#file.remove(currentScript)
#no need to remove
}
# should point to R/
baseDir <- getwd()
# find names of scripts placed in YourCodeHere
substrRight <- function(x, n=2){substr(x, nchar(x)-n+1, nchar(x))}
scripts <- dir("./YourCodeHere/")
# scripts should be executed under the following conditions:
#     - must end in ".R"
#     - must not have same name as another, already processed script
alreadyPosted <- strsplit(dir("../img/thumb/"),".png",fixed=TRUE)
# todo:
#     - throw an error if alreadyPosted
#     - throw a warning for all non-R files (they won't be run)
scripts <-  scripts[sapply(scripts,
FUN=function(x) {
substrRight(x)==".R" &&
!(strsplit(x,".R") %in% alreadyPosted)
})]
# iterate over all valid scripts and produce graphics
for (i in 1:length(scripts)) {
currentScript <- paste0("./YourCodeHere/",scripts[i])
print("processing")
png(file=paste0("../img/thumb/",scripts[i],".png"),width = 200,height=200)
setwd("YourCodeHere")
source(scripts[i])
dev.off()
file.copy(from=currentScript,to=paste0("./processedCode/",scripts[i]))
#file.remove(currentScript)
#no need to remove
}
scripts
# should point to R/
baseDir <- getwd()
# find names of scripts placed in YourCodeHere
substrRight <- function(x, n=2){substr(x, nchar(x)-n+1, nchar(x))}
scripts <- dir("./YourCodeHere/")
# scripts should be executed under the following conditions:
#     - must end in ".R"
#     - must not have same name as another, already processed script
alreadyPosted <- strsplit(dir("../img/thumb/"),".png",fixed=TRUE)
# todo:
#     - throw an error if alreadyPosted
#     - throw a warning for all non-R files (they won't be run)
scripts <-  scripts[sapply(scripts,
FUN=function(x) {
substrRight(x)==".R" &&
!(strsplit(x,".R") %in% alreadyPosted)
})]
# iterate over all valid scripts and produce graphics
for (i in 1:length(scripts)) {
currentScript <- paste0("./YourCodeHere/",scripts[i])
print("processing")
png(file=paste0("../img/thumb/",scripts[i],".png"),width = 200,height=200)
setwd("YourCodeHere")
source(scripts[i])
setwd("../")
dev.off()
file.copy(from=currentScript,to=paste0("./processedCode/",scripts[i]))
#file.remove(currentScript)
#no need to remove
}
getwd()
setwd("..")
getwd()
baseDir <- getwd()
# find names of scripts placed in YourCodeHere
substrRight <- function(x, n=2){substr(x, nchar(x)-n+1, nchar(x))}
scripts <- dir("./YourCodeHere/")
# scripts should be executed under the following conditions:
#     - must not have same name as another, already processed script
#     - must end in ".R"
alreadyPosted <- strsplit(dir("../img/thumb/"),".png",fixed=TRUE)
# todo:
#     - throw an error if alreadyPosted
#     - throw a warning for all non-R files (they won't be run)
scripts <-  scripts[sapply(scripts,
FUN=function(x) {
substrRight(x)==".R" &&
!(strsplit(x,".R") %in% alreadyPosted)
})]
# iterate over all valid scripts and produce graphics
for (i in 1:length(scripts)) {
currentScript <- paste0("./YourCodeHere/",scripts[i])
print("processing")
png(file=paste0("../img/thumb/",scripts[i],".png"),width = 200,height=200)
setwd("YourCodeHere")
source(scripts[i])
setwd("../")
dev.off()
file.copy(from=currentScript,to=paste0("./processedCode/",scripts[i]))
#file.remove(currentScript)
#no need to remove
}
dev.off()
dev.off()
dev.off()
# should point to R/
baseDir <- getwd()
# find names of scripts placed in YourCodeHere
substrRight <- function(x, n=2){substr(x, nchar(x)-n+1, nchar(x))}
scripts <- dir("./YourCodeHere/")
# scripts should be executed under the following conditions:
#     - must end in ".R"
#     - must not have same name as another, already processed script
alreadyPosted <- strsplit(dir("../img/thumb/"),".png",fixed=TRUE)
# todo:
#     - throw an error if alreadyPosted
#     - throw a warning for all non-R files (they won't be run)
scripts <-  scripts[sapply(scripts,
FUN=function(x) {
substrRight(x)==".R" &&
!(strsplit(x,".R") %in% alreadyPosted)
})]
# iterate over all valid scripts and produce graphics
for (i in 1:length(scripts)) {
currentScript <- paste0("./YourCodeHere/",scripts[i])
print("processing")
png(file=paste0("../img/thumb/",scripts[i],".png"),width = 200,height=200)
setwd("YourCodeHere")
source(scripts[i])
setwd("../")
dev.off()
file.copy(from=currentScript,to=paste0("./processedCode/",scripts[i]))
#file.remove(currentScript)
#no need to remove
}
# should point to R/
baseDir <- getwd()
# find names of scripts placed in YourCodeHere
substrRight <- function(x, n=2){substr(x, nchar(x)-n+1, nchar(x))}
scripts <- dir("./YourCodeHere/")
# scripts should be executed under the following conditions:
#     - must end in ".R"
#     - must not have same name as another, already processed script
alreadyPosted <- strsplit(dir("../img/thumb/"),".png",fixed=TRUE)
# todo:
#     - throw an error if alreadyPosted
#     - throw a warning for all non-R files (they won't be run)
scripts <-  scripts[sapply(scripts,
FUN=function(x) {
substrRight(x)==".R" &&
!(strsplit(x,".R") %in% alreadyPosted)
})]
# iterate over all valid scripts and produce graphics
for (i in 1:length(scripts)) {
currentScript <- paste0("./YourCodeHere/",scripts[i])
print("processing")
png(file=paste0("../img/thumb/",scripts[i],".png"),width = 400,height=400)
setwd("YourCodeHere")
source(scripts[i])
setwd("../")
dev.off()
file.copy(from=currentScript,to=paste0("./processedCode/",scripts[i]))
#file.remove(currentScript)
#no need to remove
}
# should point to R/
baseDir <- getwd()
# find names of scripts placed in YourCodeHere
substrRight <- function(x, n=2){substr(x, nchar(x)-n+1, nchar(x))}
scripts <- dir("./YourCodeHere/")
# scripts should be executed under the following conditions:
#     - must end in ".R"
#     - must not have same name as another, already processed script
alreadyPosted <- strsplit(dir("../img/thumb/"),".png",fixed=TRUE)
# todo:
#     - throw an error if alreadyPosted
#     - throw a warning for all non-R files (they won't be run)
scripts <-  scripts[sapply(scripts,
FUN=function(x) {
substrRight(x)==".R" &&
!(strsplit(x,".R") %in% alreadyPosted)
})]
# iterate over all valid scripts and produce graphics
for (i in 1:length(scripts)) {
currentScript <- paste0("./YourCodeHere/",scripts[i])
print("processing")
png(file=paste0("../img/thumb/",scripts[i],".png"),width = 400,height=400)
setwd("YourCodeHere")
source(scripts[i])
setwd("../")
dev.off()
file.copy(from=currentScript,to=paste0("./processedCode/",scripts[i]))
#file.remove(currentScript)
#no need to remove
}
